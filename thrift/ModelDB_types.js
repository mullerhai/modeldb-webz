//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.ProblemType = {
  'UNDEFINED' : 0,
  'BINARY_CLASSIFICATION' : 1,
  'MULTICLASS_CLASSIFICATION' : 2,
  'REGRESSION' : 3,
  'CLUSTERING' : 4,
  'RECOMMENDATION' : 5
};
ttypes.ModelCompMetric = {
  'PROJECT' : 0,
  'EXPERIMENT_RUN' : 1,
  'MODEL_TYPE' : 2,
  'PROBLEM_TYPE' : 3,
  'RMSE' : 4,
  'EXPLAINED_VARIANCE' : 5,
  'R2' : 6
};
ttypes.ModelRankMetric = {
  'RMSE' : 0,
  'EXPLAINED_VARIANCE' : 1,
  'R2' : 2
};
Project = module.exports.Project = function(args) {
  this.id = -1;
  this.name = null;
  this.author = null;
  this.description = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.author !== undefined && args.author !== null) {
      this.author = args.author;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
Project.prototype = {};
Project.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Project.prototype.write = function(output) {
  output.writeStructBegin('Project');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 3);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Experiment = module.exports.Experiment = function(args) {
  this.id = -1;
  this.projectId = null;
  this.name = null;
  this.description = null;
  this.isDefault = false;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.isDefault !== undefined && args.isDefault !== null) {
      this.isDefault = args.isDefault;
    }
  }
};
Experiment.prototype = {};
Experiment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.projectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isDefault = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Experiment.prototype.write = function(output) {
  output.writeStructBegin('Experiment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.I32, 2);
    output.writeI32(this.projectId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.isDefault !== null && this.isDefault !== undefined) {
    output.writeFieldBegin('isDefault', Thrift.Type.BOOL, 5);
    output.writeBool(this.isDefault);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentRun = module.exports.ExperimentRun = function(args) {
  this.id = -1;
  this.experimentId = null;
  this.description = null;
  this.sha = null;
  this.created = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.experimentId !== undefined && args.experimentId !== null) {
      this.experimentId = args.experimentId;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.sha !== undefined && args.sha !== null) {
      this.sha = args.sha;
    }
    if (args.created !== undefined && args.created !== null) {
      this.created = args.created;
    }
  }
};
ExperimentRun.prototype = {};
ExperimentRun.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.experimentId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sha = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.created = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentRun.prototype.write = function(output) {
  output.writeStructBegin('ExperimentRun');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.experimentId !== null && this.experimentId !== undefined) {
    output.writeFieldBegin('experimentId', Thrift.Type.I32, 2);
    output.writeI32(this.experimentId);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.sha !== null && this.sha !== undefined) {
    output.writeFieldBegin('sha', Thrift.Type.STRING, 4);
    output.writeString(this.sha);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.STRING, 5);
    output.writeString(this.created);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataFrameColumn = module.exports.DataFrameColumn = function(args) {
  this.name = null;
  this.type = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
DataFrameColumn.prototype = {};
DataFrameColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataFrameColumn.prototype.write = function(output) {
  output.writeStructBegin('DataFrameColumn');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataKV = module.exports.MetadataKV = function(args) {
  this.key = null;
  this.value = null;
  this.valueType = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.valueType !== undefined && args.valueType !== null) {
      this.valueType = args.valueType;
    }
  }
};
MetadataKV.prototype = {};
MetadataKV.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.valueType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataKV.prototype.write = function(output) {
  output.writeStructBegin('MetadataKV');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.valueType !== null && this.valueType !== undefined) {
    output.writeFieldBegin('valueType', Thrift.Type.STRING, 3);
    output.writeString(this.valueType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataFrame = module.exports.DataFrame = function(args) {
  this.id = -1;
  this.schema = null;
  this.numRows = null;
  this.tag = '';
  this.filepath = null;
  this.metadata = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.schema !== undefined && args.schema !== null) {
      this.schema = Thrift.copyList(args.schema, [ttypes.DataFrameColumn]);
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
    if (args.filepath !== undefined && args.filepath !== null) {
      this.filepath = args.filepath;
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = Thrift.copyList(args.metadata, [ttypes.MetadataKV]);
    }
  }
};
DataFrame.prototype = {};
DataFrame.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.schema = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.DataFrameColumn();
          elem6.read(input);
          this.schema.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.filepath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.metadata = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.MetadataKV();
          elem13.read(input);
          this.metadata.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataFrame.prototype.write = function(output) {
  output.writeStructBegin('DataFrame');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.schema.length);
    for (var iter14 in this.schema)
    {
      if (this.schema.hasOwnProperty(iter14))
      {
        iter14 = this.schema[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 4);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  if (this.filepath !== null && this.filepath !== undefined) {
    output.writeFieldBegin('filepath', Thrift.Type.STRING, 5);
    output.writeString(this.filepath);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.metadata.length);
    for (var iter15 in this.metadata)
    {
      if (this.metadata.hasOwnProperty(iter15))
      {
        iter15 = this.metadata[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HyperParameter = module.exports.HyperParameter = function(args) {
  this.name = null;
  this.value = null;
  this.type = null;
  this.min = null;
  this.max = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.min !== undefined && args.min !== null) {
      this.min = args.min;
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    }
  }
};
HyperParameter.prototype = {};
HyperParameter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.min = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.max = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HyperParameter.prototype.write = function(output) {
  output.writeStructBegin('HyperParameter');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.min);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.max);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProjectEvent = module.exports.ProjectEvent = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.Project(args.project);
    }
  }
};
ProjectEvent.prototype = {};
ProjectEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.Project();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectEvent.prototype.write = function(output) {
  output.writeStructBegin('ProjectEvent');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProjectEventResponse = module.exports.ProjectEventResponse = function(args) {
  this.projectId = null;
  if (args) {
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    }
  }
};
ProjectEventResponse.prototype = {};
ProjectEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.projectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectEventResponse.prototype.write = function(output) {
  output.writeStructBegin('ProjectEventResponse');
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.I32, 1);
    output.writeI32(this.projectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentEvent = module.exports.ExperimentEvent = function(args) {
  this.experiment = null;
  if (args) {
    if (args.experiment !== undefined && args.experiment !== null) {
      this.experiment = new ttypes.Experiment(args.experiment);
    }
  }
};
ExperimentEvent.prototype = {};
ExperimentEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.experiment = new ttypes.Experiment();
        this.experiment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentEvent.prototype.write = function(output) {
  output.writeStructBegin('ExperimentEvent');
  if (this.experiment !== null && this.experiment !== undefined) {
    output.writeFieldBegin('experiment', Thrift.Type.STRUCT, 1);
    this.experiment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentEventResponse = module.exports.ExperimentEventResponse = function(args) {
  this.experimentId = null;
  if (args) {
    if (args.experimentId !== undefined && args.experimentId !== null) {
      this.experimentId = args.experimentId;
    }
  }
};
ExperimentEventResponse.prototype = {};
ExperimentEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.experimentId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentEventResponse.prototype.write = function(output) {
  output.writeStructBegin('ExperimentEventResponse');
  if (this.experimentId !== null && this.experimentId !== undefined) {
    output.writeFieldBegin('experimentId', Thrift.Type.I32, 1);
    output.writeI32(this.experimentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentRunEvent = module.exports.ExperimentRunEvent = function(args) {
  this.experimentRun = null;
  if (args) {
    if (args.experimentRun !== undefined && args.experimentRun !== null) {
      this.experimentRun = new ttypes.ExperimentRun(args.experimentRun);
    }
  }
};
ExperimentRunEvent.prototype = {};
ExperimentRunEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.experimentRun = new ttypes.ExperimentRun();
        this.experimentRun.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentRunEvent.prototype.write = function(output) {
  output.writeStructBegin('ExperimentRunEvent');
  if (this.experimentRun !== null && this.experimentRun !== undefined) {
    output.writeFieldBegin('experimentRun', Thrift.Type.STRUCT, 1);
    this.experimentRun.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentRunEventResponse = module.exports.ExperimentRunEventResponse = function(args) {
  this.experimentRunId = null;
  if (args) {
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
ExperimentRunEventResponse.prototype = {};
ExperimentRunEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentRunEventResponse.prototype.write = function(output) {
  output.writeStructBegin('ExperimentRunEventResponse');
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 1);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransformerSpec = module.exports.TransformerSpec = function(args) {
  this.id = -1;
  this.transformerType = null;
  this.hyperparameters = null;
  this.tag = '';
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.transformerType !== undefined && args.transformerType !== null) {
      this.transformerType = args.transformerType;
    }
    if (args.hyperparameters !== undefined && args.hyperparameters !== null) {
      this.hyperparameters = Thrift.copyList(args.hyperparameters, [ttypes.HyperParameter]);
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
  }
};
TransformerSpec.prototype = {};
TransformerSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.transformerType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.hyperparameters = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.HyperParameter();
          elem22.read(input);
          this.hyperparameters.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransformerSpec.prototype.write = function(output) {
  output.writeStructBegin('TransformerSpec');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.transformerType !== null && this.transformerType !== undefined) {
    output.writeFieldBegin('transformerType', Thrift.Type.STRING, 2);
    output.writeString(this.transformerType);
    output.writeFieldEnd();
  }
  if (this.hyperparameters !== null && this.hyperparameters !== undefined) {
    output.writeFieldBegin('hyperparameters', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.hyperparameters.length);
    for (var iter23 in this.hyperparameters)
    {
      if (this.hyperparameters.hasOwnProperty(iter23))
      {
        iter23 = this.hyperparameters[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 4);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Transformer = module.exports.Transformer = function(args) {
  this.id = -1;
  this.transformerType = null;
  this.tag = '';
  this.filepath = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.transformerType !== undefined && args.transformerType !== null) {
      this.transformerType = args.transformerType;
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
    if (args.filepath !== undefined && args.filepath !== null) {
      this.filepath = args.filepath;
    }
  }
};
Transformer.prototype = {};
Transformer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.transformerType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.filepath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transformer.prototype.write = function(output) {
  output.writeStructBegin('Transformer');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.transformerType !== null && this.transformerType !== undefined) {
    output.writeFieldBegin('transformerType', Thrift.Type.STRING, 2);
    output.writeString(this.transformerType);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 3);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  if (this.filepath !== null && this.filepath !== undefined) {
    output.writeFieldBegin('filepath', Thrift.Type.STRING, 4);
    output.writeString(this.filepath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LinearModelTerm = module.exports.LinearModelTerm = function(args) {
  this.coefficient = null;
  this.tStat = null;
  this.stdErr = null;
  this.pValue = null;
  if (args) {
    if (args.coefficient !== undefined && args.coefficient !== null) {
      this.coefficient = args.coefficient;
    }
    if (args.tStat !== undefined && args.tStat !== null) {
      this.tStat = args.tStat;
    }
    if (args.stdErr !== undefined && args.stdErr !== null) {
      this.stdErr = args.stdErr;
    }
    if (args.pValue !== undefined && args.pValue !== null) {
      this.pValue = args.pValue;
    }
  }
};
LinearModelTerm.prototype = {};
LinearModelTerm.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.coefficient = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tStat = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stdErr = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.pValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinearModelTerm.prototype.write = function(output) {
  output.writeStructBegin('LinearModelTerm');
  if (this.coefficient !== null && this.coefficient !== undefined) {
    output.writeFieldBegin('coefficient', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.coefficient);
    output.writeFieldEnd();
  }
  if (this.tStat !== null && this.tStat !== undefined) {
    output.writeFieldBegin('tStat', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.tStat);
    output.writeFieldEnd();
  }
  if (this.stdErr !== null && this.stdErr !== undefined) {
    output.writeFieldBegin('stdErr', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.stdErr);
    output.writeFieldEnd();
  }
  if (this.pValue !== null && this.pValue !== undefined) {
    output.writeFieldBegin('pValue', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.pValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LinearModel = module.exports.LinearModel = function(args) {
  this.interceptTerm = null;
  this.featureTerms = null;
  this.objectiveHistory = null;
  this.rmse = null;
  this.explainedVariance = null;
  this.r2 = null;
  if (args) {
    if (args.interceptTerm !== undefined && args.interceptTerm !== null) {
      this.interceptTerm = new ttypes.LinearModelTerm(args.interceptTerm);
    }
    if (args.featureTerms !== undefined && args.featureTerms !== null) {
      this.featureTerms = Thrift.copyList(args.featureTerms, [ttypes.LinearModelTerm]);
    }
    if (args.objectiveHistory !== undefined && args.objectiveHistory !== null) {
      this.objectiveHistory = Thrift.copyList(args.objectiveHistory, [null]);
    }
    if (args.rmse !== undefined && args.rmse !== null) {
      this.rmse = args.rmse;
    }
    if (args.explainedVariance !== undefined && args.explainedVariance !== null) {
      this.explainedVariance = args.explainedVariance;
    }
    if (args.r2 !== undefined && args.r2 !== null) {
      this.r2 = args.r2;
    }
  }
};
LinearModel.prototype = {};
LinearModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.interceptTerm = new ttypes.LinearModelTerm();
        this.interceptTerm.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.featureTerms = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.LinearModelTerm();
          elem30.read(input);
          this.featureTerms.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.objectiveHistory = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = input.readDouble();
          this.objectiveHistory.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rmse = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.explainedVariance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.r2 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinearModel.prototype.write = function(output) {
  output.writeStructBegin('LinearModel');
  if (this.interceptTerm !== null && this.interceptTerm !== undefined) {
    output.writeFieldBegin('interceptTerm', Thrift.Type.STRUCT, 1);
    this.interceptTerm.write(output);
    output.writeFieldEnd();
  }
  if (this.featureTerms !== null && this.featureTerms !== undefined) {
    output.writeFieldBegin('featureTerms', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.featureTerms.length);
    for (var iter38 in this.featureTerms)
    {
      if (this.featureTerms.hasOwnProperty(iter38))
      {
        iter38 = this.featureTerms[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.objectiveHistory !== null && this.objectiveHistory !== undefined) {
    output.writeFieldBegin('objectiveHistory', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.DOUBLE, this.objectiveHistory.length);
    for (var iter39 in this.objectiveHistory)
    {
      if (this.objectiveHistory.hasOwnProperty(iter39))
      {
        iter39 = this.objectiveHistory[iter39];
        output.writeDouble(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rmse !== null && this.rmse !== undefined) {
    output.writeFieldBegin('rmse', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.rmse);
    output.writeFieldEnd();
  }
  if (this.explainedVariance !== null && this.explainedVariance !== undefined) {
    output.writeFieldBegin('explainedVariance', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.explainedVariance);
    output.writeFieldEnd();
  }
  if (this.r2 !== null && this.r2 !== undefined) {
    output.writeFieldBegin('r2', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.r2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FitEvent = module.exports.FitEvent = function(args) {
  this.df = null;
  this.spec = null;
  this.model = null;
  this.featureColumns = null;
  this.predictionColumns = null;
  this.labelColumns = null;
  this.experimentRunId = null;
  this.problemType = 0;
  this.metadata = null;
  if (args) {
    if (args.df !== undefined && args.df !== null) {
      this.df = new ttypes.DataFrame(args.df);
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new ttypes.TransformerSpec(args.spec);
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = new ttypes.Transformer(args.model);
    }
    if (args.featureColumns !== undefined && args.featureColumns !== null) {
      this.featureColumns = Thrift.copyList(args.featureColumns, [null]);
    }
    if (args.predictionColumns !== undefined && args.predictionColumns !== null) {
      this.predictionColumns = Thrift.copyList(args.predictionColumns, [null]);
    }
    if (args.labelColumns !== undefined && args.labelColumns !== null) {
      this.labelColumns = Thrift.copyList(args.labelColumns, [null]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
    if (args.problemType !== undefined && args.problemType !== null) {
      this.problemType = args.problemType;
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = args.metadata;
    }
  }
};
FitEvent.prototype = {};
FitEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.df = new ttypes.DataFrame();
        this.df.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new ttypes.TransformerSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ttypes.Transformer();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.featureColumns = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.featureColumns.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size47 = 0;
        var _rtmp351;
        this.predictionColumns = [];
        var _etype50 = 0;
        _rtmp351 = input.readListBegin();
        _etype50 = _rtmp351.etype;
        _size47 = _rtmp351.size;
        for (var _i52 = 0; _i52 < _size47; ++_i52)
        {
          var elem53 = null;
          elem53 = input.readString();
          this.predictionColumns.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size54 = 0;
        var _rtmp358;
        this.labelColumns = [];
        var _etype57 = 0;
        _rtmp358 = input.readListBegin();
        _etype57 = _rtmp358.etype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var elem60 = null;
          elem60 = input.readString();
          this.labelColumns.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.problemType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FitEvent.prototype.write = function(output) {
  output.writeStructBegin('FitEvent');
  if (this.df !== null && this.df !== undefined) {
    output.writeFieldBegin('df', Thrift.Type.STRUCT, 1);
    this.df.write(output);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 3);
    this.model.write(output);
    output.writeFieldEnd();
  }
  if (this.featureColumns !== null && this.featureColumns !== undefined) {
    output.writeFieldBegin('featureColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.featureColumns.length);
    for (var iter61 in this.featureColumns)
    {
      if (this.featureColumns.hasOwnProperty(iter61))
      {
        iter61 = this.featureColumns[iter61];
        output.writeString(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.predictionColumns !== null && this.predictionColumns !== undefined) {
    output.writeFieldBegin('predictionColumns', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.predictionColumns.length);
    for (var iter62 in this.predictionColumns)
    {
      if (this.predictionColumns.hasOwnProperty(iter62))
      {
        iter62 = this.predictionColumns[iter62];
        output.writeString(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.labelColumns !== null && this.labelColumns !== undefined) {
    output.writeFieldBegin('labelColumns', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.labelColumns.length);
    for (var iter63 in this.labelColumns)
    {
      if (this.labelColumns.hasOwnProperty(iter63))
      {
        iter63 = this.labelColumns[iter63];
        output.writeString(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 7);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  if (this.problemType !== null && this.problemType !== undefined) {
    output.writeFieldBegin('problemType', Thrift.Type.I32, 8);
    output.writeI32(this.problemType);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRING, 9);
    output.writeString(this.metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FitEventResponse = module.exports.FitEventResponse = function(args) {
  this.dfId = null;
  this.specId = null;
  this.modelId = null;
  this.eventId = null;
  this.fitEventId = null;
  if (args) {
    if (args.dfId !== undefined && args.dfId !== null) {
      this.dfId = args.dfId;
    }
    if (args.specId !== undefined && args.specId !== null) {
      this.specId = args.specId;
    }
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
    if (args.fitEventId !== undefined && args.fitEventId !== null) {
      this.fitEventId = args.fitEventId;
    }
  }
};
FitEventResponse.prototype = {};
FitEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dfId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.specId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.eventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.fitEventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FitEventResponse.prototype.write = function(output) {
  output.writeStructBegin('FitEventResponse');
  if (this.dfId !== null && this.dfId !== undefined) {
    output.writeFieldBegin('dfId', Thrift.Type.I32, 1);
    output.writeI32(this.dfId);
    output.writeFieldEnd();
  }
  if (this.specId !== null && this.specId !== undefined) {
    output.writeFieldBegin('specId', Thrift.Type.I32, 2);
    output.writeI32(this.specId);
    output.writeFieldEnd();
  }
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 3);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I32, 4);
    output.writeI32(this.eventId);
    output.writeFieldEnd();
  }
  if (this.fitEventId !== null && this.fitEventId !== undefined) {
    output.writeFieldBegin('fitEventId', Thrift.Type.I32, 5);
    output.writeI32(this.fitEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricEvent = module.exports.MetricEvent = function(args) {
  this.df = null;
  this.model = null;
  this.metricType = null;
  this.metricValue = null;
  this.labelCol = null;
  this.predictionCol = null;
  this.experimentRunId = null;
  if (args) {
    if (args.df !== undefined && args.df !== null) {
      this.df = new ttypes.DataFrame(args.df);
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = new ttypes.Transformer(args.model);
    }
    if (args.metricType !== undefined && args.metricType !== null) {
      this.metricType = args.metricType;
    }
    if (args.metricValue !== undefined && args.metricValue !== null) {
      this.metricValue = args.metricValue;
    }
    if (args.labelCol !== undefined && args.labelCol !== null) {
      this.labelCol = args.labelCol;
    }
    if (args.predictionCol !== undefined && args.predictionCol !== null) {
      this.predictionCol = args.predictionCol;
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
MetricEvent.prototype = {};
MetricEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.df = new ttypes.DataFrame();
        this.df.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ttypes.Transformer();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.metricType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.metricValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.labelCol = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.predictionCol = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricEvent.prototype.write = function(output) {
  output.writeStructBegin('MetricEvent');
  if (this.df !== null && this.df !== undefined) {
    output.writeFieldBegin('df', Thrift.Type.STRUCT, 1);
    this.df.write(output);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 2);
    this.model.write(output);
    output.writeFieldEnd();
  }
  if (this.metricType !== null && this.metricType !== undefined) {
    output.writeFieldBegin('metricType', Thrift.Type.STRING, 3);
    output.writeString(this.metricType);
    output.writeFieldEnd();
  }
  if (this.metricValue !== null && this.metricValue !== undefined) {
    output.writeFieldBegin('metricValue', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.metricValue);
    output.writeFieldEnd();
  }
  if (this.labelCol !== null && this.labelCol !== undefined) {
    output.writeFieldBegin('labelCol', Thrift.Type.STRING, 5);
    output.writeString(this.labelCol);
    output.writeFieldEnd();
  }
  if (this.predictionCol !== null && this.predictionCol !== undefined) {
    output.writeFieldBegin('predictionCol', Thrift.Type.STRING, 6);
    output.writeString(this.predictionCol);
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 7);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricEventResponse = module.exports.MetricEventResponse = function(args) {
  this.modelId = null;
  this.dfId = null;
  this.eventId = null;
  this.metricEventId = null;
  if (args) {
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
    if (args.dfId !== undefined && args.dfId !== null) {
      this.dfId = args.dfId;
    }
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
    if (args.metricEventId !== undefined && args.metricEventId !== null) {
      this.metricEventId = args.metricEventId;
    }
  }
};
MetricEventResponse.prototype = {};
MetricEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dfId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.metricEventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricEventResponse.prototype.write = function(output) {
  output.writeStructBegin('MetricEventResponse');
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 1);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  if (this.dfId !== null && this.dfId !== undefined) {
    output.writeFieldBegin('dfId', Thrift.Type.I32, 2);
    output.writeI32(this.dfId);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I32, 3);
    output.writeI32(this.eventId);
    output.writeFieldEnd();
  }
  if (this.metricEventId !== null && this.metricEventId !== undefined) {
    output.writeFieldBegin('metricEventId', Thrift.Type.I32, 4);
    output.writeI32(this.metricEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransformEvent = module.exports.TransformEvent = function(args) {
  this.oldDataFrame = null;
  this.newDataFrame = null;
  this.transformer = null;
  this.inputColumns = null;
  this.outputColumns = null;
  this.experimentRunId = null;
  if (args) {
    if (args.oldDataFrame !== undefined && args.oldDataFrame !== null) {
      this.oldDataFrame = new ttypes.DataFrame(args.oldDataFrame);
    }
    if (args.newDataFrame !== undefined && args.newDataFrame !== null) {
      this.newDataFrame = new ttypes.DataFrame(args.newDataFrame);
    }
    if (args.transformer !== undefined && args.transformer !== null) {
      this.transformer = new ttypes.Transformer(args.transformer);
    }
    if (args.inputColumns !== undefined && args.inputColumns !== null) {
      this.inputColumns = Thrift.copyList(args.inputColumns, [null]);
    }
    if (args.outputColumns !== undefined && args.outputColumns !== null) {
      this.outputColumns = Thrift.copyList(args.outputColumns, [null]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
TransformEvent.prototype = {};
TransformEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.oldDataFrame = new ttypes.DataFrame();
        this.oldDataFrame.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.newDataFrame = new ttypes.DataFrame();
        this.newDataFrame.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.transformer = new ttypes.Transformer();
        this.transformer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.inputColumns = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.inputColumns.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.outputColumns = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = input.readString();
          this.outputColumns.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransformEvent.prototype.write = function(output) {
  output.writeStructBegin('TransformEvent');
  if (this.oldDataFrame !== null && this.oldDataFrame !== undefined) {
    output.writeFieldBegin('oldDataFrame', Thrift.Type.STRUCT, 1);
    this.oldDataFrame.write(output);
    output.writeFieldEnd();
  }
  if (this.newDataFrame !== null && this.newDataFrame !== undefined) {
    output.writeFieldBegin('newDataFrame', Thrift.Type.STRUCT, 2);
    this.newDataFrame.write(output);
    output.writeFieldEnd();
  }
  if (this.transformer !== null && this.transformer !== undefined) {
    output.writeFieldBegin('transformer', Thrift.Type.STRUCT, 3);
    this.transformer.write(output);
    output.writeFieldEnd();
  }
  if (this.inputColumns !== null && this.inputColumns !== undefined) {
    output.writeFieldBegin('inputColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.inputColumns.length);
    for (var iter78 in this.inputColumns)
    {
      if (this.inputColumns.hasOwnProperty(iter78))
      {
        iter78 = this.inputColumns[iter78];
        output.writeString(iter78);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputColumns !== null && this.outputColumns !== undefined) {
    output.writeFieldBegin('outputColumns', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.outputColumns.length);
    for (var iter79 in this.outputColumns)
    {
      if (this.outputColumns.hasOwnProperty(iter79))
      {
        iter79 = this.outputColumns[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 6);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransformEventResponse = module.exports.TransformEventResponse = function(args) {
  this.oldDataFrameId = null;
  this.newDataFrameId = null;
  this.transformerId = null;
  this.eventId = null;
  this.filepath = null;
  if (args) {
    if (args.oldDataFrameId !== undefined && args.oldDataFrameId !== null) {
      this.oldDataFrameId = args.oldDataFrameId;
    }
    if (args.newDataFrameId !== undefined && args.newDataFrameId !== null) {
      this.newDataFrameId = args.newDataFrameId;
    }
    if (args.transformerId !== undefined && args.transformerId !== null) {
      this.transformerId = args.transformerId;
    }
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
    if (args.filepath !== undefined && args.filepath !== null) {
      this.filepath = args.filepath;
    }
  }
};
TransformEventResponse.prototype = {};
TransformEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.oldDataFrameId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.newDataFrameId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.transformerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.eventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.filepath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransformEventResponse.prototype.write = function(output) {
  output.writeStructBegin('TransformEventResponse');
  if (this.oldDataFrameId !== null && this.oldDataFrameId !== undefined) {
    output.writeFieldBegin('oldDataFrameId', Thrift.Type.I32, 1);
    output.writeI32(this.oldDataFrameId);
    output.writeFieldEnd();
  }
  if (this.newDataFrameId !== null && this.newDataFrameId !== undefined) {
    output.writeFieldBegin('newDataFrameId', Thrift.Type.I32, 2);
    output.writeI32(this.newDataFrameId);
    output.writeFieldEnd();
  }
  if (this.transformerId !== null && this.transformerId !== undefined) {
    output.writeFieldBegin('transformerId', Thrift.Type.I32, 3);
    output.writeI32(this.transformerId);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I32, 4);
    output.writeI32(this.eventId);
    output.writeFieldEnd();
  }
  if (this.filepath !== null && this.filepath !== undefined) {
    output.writeFieldBegin('filepath', Thrift.Type.STRING, 5);
    output.writeString(this.filepath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RandomSplitEvent = module.exports.RandomSplitEvent = function(args) {
  this.oldDataFrame = null;
  this.weights = null;
  this.seed = null;
  this.splitDataFrames = null;
  this.experimentRunId = null;
  if (args) {
    if (args.oldDataFrame !== undefined && args.oldDataFrame !== null) {
      this.oldDataFrame = new ttypes.DataFrame(args.oldDataFrame);
    }
    if (args.weights !== undefined && args.weights !== null) {
      this.weights = Thrift.copyList(args.weights, [null]);
    }
    if (args.seed !== undefined && args.seed !== null) {
      this.seed = args.seed;
    }
    if (args.splitDataFrames !== undefined && args.splitDataFrames !== null) {
      this.splitDataFrames = Thrift.copyList(args.splitDataFrames, [ttypes.DataFrame]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
RandomSplitEvent.prototype = {};
RandomSplitEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.oldDataFrame = new ttypes.DataFrame();
        this.oldDataFrame.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.weights = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readDouble();
          this.weights.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.seed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size87 = 0;
        var _rtmp391;
        this.splitDataFrames = [];
        var _etype90 = 0;
        _rtmp391 = input.readListBegin();
        _etype90 = _rtmp391.etype;
        _size87 = _rtmp391.size;
        for (var _i92 = 0; _i92 < _size87; ++_i92)
        {
          var elem93 = null;
          elem93 = new ttypes.DataFrame();
          elem93.read(input);
          this.splitDataFrames.push(elem93);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RandomSplitEvent.prototype.write = function(output) {
  output.writeStructBegin('RandomSplitEvent');
  if (this.oldDataFrame !== null && this.oldDataFrame !== undefined) {
    output.writeFieldBegin('oldDataFrame', Thrift.Type.STRUCT, 1);
    this.oldDataFrame.write(output);
    output.writeFieldEnd();
  }
  if (this.weights !== null && this.weights !== undefined) {
    output.writeFieldBegin('weights', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.weights.length);
    for (var iter94 in this.weights)
    {
      if (this.weights.hasOwnProperty(iter94))
      {
        iter94 = this.weights[iter94];
        output.writeDouble(iter94);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.seed !== null && this.seed !== undefined) {
    output.writeFieldBegin('seed', Thrift.Type.I64, 3);
    output.writeI64(this.seed);
    output.writeFieldEnd();
  }
  if (this.splitDataFrames !== null && this.splitDataFrames !== undefined) {
    output.writeFieldBegin('splitDataFrames', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.splitDataFrames.length);
    for (var iter95 in this.splitDataFrames)
    {
      if (this.splitDataFrames.hasOwnProperty(iter95))
      {
        iter95 = this.splitDataFrames[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 5);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RandomSplitEventResponse = module.exports.RandomSplitEventResponse = function(args) {
  this.oldDataFrameId = null;
  this.splitIds = null;
  this.splitEventId = null;
  if (args) {
    if (args.oldDataFrameId !== undefined && args.oldDataFrameId !== null) {
      this.oldDataFrameId = args.oldDataFrameId;
    }
    if (args.splitIds !== undefined && args.splitIds !== null) {
      this.splitIds = Thrift.copyList(args.splitIds, [null]);
    }
    if (args.splitEventId !== undefined && args.splitEventId !== null) {
      this.splitEventId = args.splitEventId;
    }
  }
};
RandomSplitEventResponse.prototype = {};
RandomSplitEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.oldDataFrameId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.splitIds = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readI32();
          this.splitIds.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.splitEventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RandomSplitEventResponse.prototype.write = function(output) {
  output.writeStructBegin('RandomSplitEventResponse');
  if (this.oldDataFrameId !== null && this.oldDataFrameId !== undefined) {
    output.writeFieldBegin('oldDataFrameId', Thrift.Type.I32, 1);
    output.writeI32(this.oldDataFrameId);
    output.writeFieldEnd();
  }
  if (this.splitIds !== null && this.splitIds !== undefined) {
    output.writeFieldBegin('splitIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.splitIds.length);
    for (var iter103 in this.splitIds)
    {
      if (this.splitIds.hasOwnProperty(iter103))
      {
        iter103 = this.splitIds[iter103];
        output.writeI32(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.splitEventId !== null && this.splitEventId !== undefined) {
    output.writeFieldBegin('splitEventId', Thrift.Type.I32, 3);
    output.writeI32(this.splitEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PipelineTransformStage = module.exports.PipelineTransformStage = function(args) {
  this.stageNumber = null;
  this.te = null;
  if (args) {
    if (args.stageNumber !== undefined && args.stageNumber !== null) {
      this.stageNumber = args.stageNumber;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = new ttypes.TransformEvent(args.te);
    }
  }
};
PipelineTransformStage.prototype = {};
PipelineTransformStage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.stageNumber = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TransformEvent();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PipelineTransformStage.prototype.write = function(output) {
  output.writeStructBegin('PipelineTransformStage');
  if (this.stageNumber !== null && this.stageNumber !== undefined) {
    output.writeFieldBegin('stageNumber', Thrift.Type.I32, 1);
    output.writeI32(this.stageNumber);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PipelineFitStage = module.exports.PipelineFitStage = function(args) {
  this.stageNumber = null;
  this.fe = null;
  if (args) {
    if (args.stageNumber !== undefined && args.stageNumber !== null) {
      this.stageNumber = args.stageNumber;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = new ttypes.FitEvent(args.fe);
    }
  }
};
PipelineFitStage.prototype = {};
PipelineFitStage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.stageNumber = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.FitEvent();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PipelineFitStage.prototype.write = function(output) {
  output.writeStructBegin('PipelineFitStage');
  if (this.stageNumber !== null && this.stageNumber !== undefined) {
    output.writeFieldBegin('stageNumber', Thrift.Type.I32, 1);
    output.writeI32(this.stageNumber);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 2);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PipelineEvent = module.exports.PipelineEvent = function(args) {
  this.pipelineFit = null;
  this.transformStages = null;
  this.fitStages = null;
  this.experimentRunId = null;
  if (args) {
    if (args.pipelineFit !== undefined && args.pipelineFit !== null) {
      this.pipelineFit = new ttypes.FitEvent(args.pipelineFit);
    }
    if (args.transformStages !== undefined && args.transformStages !== null) {
      this.transformStages = Thrift.copyList(args.transformStages, [ttypes.PipelineTransformStage]);
    }
    if (args.fitStages !== undefined && args.fitStages !== null) {
      this.fitStages = Thrift.copyList(args.fitStages, [ttypes.PipelineFitStage]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
PipelineEvent.prototype = {};
PipelineEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pipelineFit = new ttypes.FitEvent();
        this.pipelineFit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.transformStages = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.PipelineTransformStage();
          elem110.read(input);
          this.transformStages.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size111 = 0;
        var _rtmp3115;
        this.fitStages = [];
        var _etype114 = 0;
        _rtmp3115 = input.readListBegin();
        _etype114 = _rtmp3115.etype;
        _size111 = _rtmp3115.size;
        for (var _i116 = 0; _i116 < _size111; ++_i116)
        {
          var elem117 = null;
          elem117 = new ttypes.PipelineFitStage();
          elem117.read(input);
          this.fitStages.push(elem117);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PipelineEvent.prototype.write = function(output) {
  output.writeStructBegin('PipelineEvent');
  if (this.pipelineFit !== null && this.pipelineFit !== undefined) {
    output.writeFieldBegin('pipelineFit', Thrift.Type.STRUCT, 1);
    this.pipelineFit.write(output);
    output.writeFieldEnd();
  }
  if (this.transformStages !== null && this.transformStages !== undefined) {
    output.writeFieldBegin('transformStages', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.transformStages.length);
    for (var iter118 in this.transformStages)
    {
      if (this.transformStages.hasOwnProperty(iter118))
      {
        iter118 = this.transformStages[iter118];
        iter118.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fitStages !== null && this.fitStages !== undefined) {
    output.writeFieldBegin('fitStages', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.fitStages.length);
    for (var iter119 in this.fitStages)
    {
      if (this.fitStages.hasOwnProperty(iter119))
      {
        iter119 = this.fitStages[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 4);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PipelineEventResponse = module.exports.PipelineEventResponse = function(args) {
  this.pipelineFitResponse = null;
  this.transformStagesResponses = null;
  this.fitStagesResponses = null;
  if (args) {
    if (args.pipelineFitResponse !== undefined && args.pipelineFitResponse !== null) {
      this.pipelineFitResponse = new ttypes.FitEventResponse(args.pipelineFitResponse);
    }
    if (args.transformStagesResponses !== undefined && args.transformStagesResponses !== null) {
      this.transformStagesResponses = Thrift.copyList(args.transformStagesResponses, [ttypes.TransformEventResponse]);
    }
    if (args.fitStagesResponses !== undefined && args.fitStagesResponses !== null) {
      this.fitStagesResponses = Thrift.copyList(args.fitStagesResponses, [ttypes.FitEventResponse]);
    }
  }
};
PipelineEventResponse.prototype = {};
PipelineEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pipelineFitResponse = new ttypes.FitEventResponse();
        this.pipelineFitResponse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.transformStagesResponses = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.TransformEventResponse();
          elem126.read(input);
          this.transformStagesResponses.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size127 = 0;
        var _rtmp3131;
        this.fitStagesResponses = [];
        var _etype130 = 0;
        _rtmp3131 = input.readListBegin();
        _etype130 = _rtmp3131.etype;
        _size127 = _rtmp3131.size;
        for (var _i132 = 0; _i132 < _size127; ++_i132)
        {
          var elem133 = null;
          elem133 = new ttypes.FitEventResponse();
          elem133.read(input);
          this.fitStagesResponses.push(elem133);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PipelineEventResponse.prototype.write = function(output) {
  output.writeStructBegin('PipelineEventResponse');
  if (this.pipelineFitResponse !== null && this.pipelineFitResponse !== undefined) {
    output.writeFieldBegin('pipelineFitResponse', Thrift.Type.STRUCT, 1);
    this.pipelineFitResponse.write(output);
    output.writeFieldEnd();
  }
  if (this.transformStagesResponses !== null && this.transformStagesResponses !== undefined) {
    output.writeFieldBegin('transformStagesResponses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.transformStagesResponses.length);
    for (var iter134 in this.transformStagesResponses)
    {
      if (this.transformStagesResponses.hasOwnProperty(iter134))
      {
        iter134 = this.transformStagesResponses[iter134];
        iter134.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fitStagesResponses !== null && this.fitStagesResponses !== undefined) {
    output.writeFieldBegin('fitStagesResponses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.fitStagesResponses.length);
    for (var iter135 in this.fitStagesResponses)
    {
      if (this.fitStagesResponses.hasOwnProperty(iter135))
      {
        iter135 = this.fitStagesResponses[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationFragment = module.exports.AnnotationFragment = function(args) {
  this.type = null;
  this.df = null;
  this.spec = null;
  this.transformer = null;
  this.message = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.df !== undefined && args.df !== null) {
      this.df = new ttypes.DataFrame(args.df);
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new ttypes.TransformerSpec(args.spec);
    }
    if (args.transformer !== undefined && args.transformer !== null) {
      this.transformer = new ttypes.Transformer(args.transformer);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
AnnotationFragment.prototype = {};
AnnotationFragment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.df = new ttypes.DataFrame();
        this.df.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new ttypes.TransformerSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.transformer = new ttypes.Transformer();
        this.transformer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationFragment.prototype.write = function(output) {
  output.writeStructBegin('AnnotationFragment');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.df !== null && this.df !== undefined) {
    output.writeFieldBegin('df', Thrift.Type.STRUCT, 2);
    this.df.write(output);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 3);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  if (this.transformer !== null && this.transformer !== undefined) {
    output.writeFieldBegin('transformer', Thrift.Type.STRUCT, 4);
    this.transformer.write(output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 5);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationFragmentResponse = module.exports.AnnotationFragmentResponse = function(args) {
  this.type = null;
  this.id = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
AnnotationFragmentResponse.prototype = {};
AnnotationFragmentResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationFragmentResponse.prototype.write = function(output) {
  output.writeStructBegin('AnnotationFragmentResponse');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 2);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationEvent = module.exports.AnnotationEvent = function(args) {
  this.fragments = null;
  this.experimentRunId = null;
  if (args) {
    if (args.fragments !== undefined && args.fragments !== null) {
      this.fragments = Thrift.copyList(args.fragments, [ttypes.AnnotationFragment]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
AnnotationEvent.prototype = {};
AnnotationEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.fragments = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new ttypes.AnnotationFragment();
          elem142.read(input);
          this.fragments.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationEvent.prototype.write = function(output) {
  output.writeStructBegin('AnnotationEvent');
  if (this.fragments !== null && this.fragments !== undefined) {
    output.writeFieldBegin('fragments', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.fragments.length);
    for (var iter143 in this.fragments)
    {
      if (this.fragments.hasOwnProperty(iter143))
      {
        iter143 = this.fragments[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 2);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationEventResponse = module.exports.AnnotationEventResponse = function(args) {
  this.annotationId = null;
  this.fragmentResponses = null;
  if (args) {
    if (args.annotationId !== undefined && args.annotationId !== null) {
      this.annotationId = args.annotationId;
    }
    if (args.fragmentResponses !== undefined && args.fragmentResponses !== null) {
      this.fragmentResponses = Thrift.copyList(args.fragmentResponses, [ttypes.AnnotationFragmentResponse]);
    }
  }
};
AnnotationEventResponse.prototype = {};
AnnotationEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.annotationId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.fragmentResponses = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = new ttypes.AnnotationFragmentResponse();
          elem150.read(input);
          this.fragmentResponses.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationEventResponse.prototype.write = function(output) {
  output.writeStructBegin('AnnotationEventResponse');
  if (this.annotationId !== null && this.annotationId !== undefined) {
    output.writeFieldBegin('annotationId', Thrift.Type.I32, 1);
    output.writeI32(this.annotationId);
    output.writeFieldEnd();
  }
  if (this.fragmentResponses !== null && this.fragmentResponses !== undefined) {
    output.writeFieldBegin('fragmentResponses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.fragmentResponses.length);
    for (var iter151 in this.fragmentResponses)
    {
      if (this.fragmentResponses.hasOwnProperty(iter151))
      {
        iter151 = this.fragmentResponses[iter151];
        iter151.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataFrameAncestry = module.exports.DataFrameAncestry = function(args) {
  this.ancestors = null;
  if (args) {
    if (args.ancestors !== undefined && args.ancestors !== null) {
      this.ancestors = Thrift.copyList(args.ancestors, [ttypes.DataFrame]);
    }
  }
};
DataFrameAncestry.prototype = {};
DataFrameAncestry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.ancestors = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = new ttypes.DataFrame();
          elem158.read(input);
          this.ancestors.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataFrameAncestry.prototype.write = function(output) {
  output.writeStructBegin('DataFrameAncestry');
  if (this.ancestors !== null && this.ancestors !== undefined) {
    output.writeFieldBegin('ancestors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.ancestors.length);
    for (var iter159 in this.ancestors)
    {
      if (this.ancestors.hasOwnProperty(iter159))
      {
        iter159 = this.ancestors[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonAncestor = module.exports.CommonAncestor = function(args) {
  this.ancestor = null;
  this.chainIndexModel1 = null;
  this.chainIndexModel2 = null;
  if (args) {
    if (args.ancestor !== undefined && args.ancestor !== null) {
      this.ancestor = new ttypes.DataFrame(args.ancestor);
    }
    if (args.chainIndexModel1 !== undefined && args.chainIndexModel1 !== null) {
      this.chainIndexModel1 = args.chainIndexModel1;
    }
    if (args.chainIndexModel2 !== undefined && args.chainIndexModel2 !== null) {
      this.chainIndexModel2 = args.chainIndexModel2;
    }
  }
};
CommonAncestor.prototype = {};
CommonAncestor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ancestor = new ttypes.DataFrame();
        this.ancestor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.chainIndexModel1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.chainIndexModel2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonAncestor.prototype.write = function(output) {
  output.writeStructBegin('CommonAncestor');
  if (this.ancestor !== null && this.ancestor !== undefined) {
    output.writeFieldBegin('ancestor', Thrift.Type.STRUCT, 1);
    this.ancestor.write(output);
    output.writeFieldEnd();
  }
  if (this.chainIndexModel1 !== null && this.chainIndexModel1 !== undefined) {
    output.writeFieldBegin('chainIndexModel1', Thrift.Type.I32, 2);
    output.writeI32(this.chainIndexModel1);
    output.writeFieldEnd();
  }
  if (this.chainIndexModel2 !== null && this.chainIndexModel2 !== undefined) {
    output.writeFieldBegin('chainIndexModel2', Thrift.Type.I32, 3);
    output.writeI32(this.chainIndexModel2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StringPair = module.exports.StringPair = function(args) {
  this.first = null;
  this.second = null;
  if (args) {
    if (args.first !== undefined && args.first !== null) {
      this.first = args.first;
    }
    if (args.second !== undefined && args.second !== null) {
      this.second = args.second;
    }
  }
};
StringPair.prototype = {};
StringPair.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.first = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.second = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StringPair.prototype.write = function(output) {
  output.writeStructBegin('StringPair');
  if (this.first !== null && this.first !== undefined) {
    output.writeFieldBegin('first', Thrift.Type.STRING, 1);
    output.writeString(this.first);
    output.writeFieldEnd();
  }
  if (this.second !== null && this.second !== undefined) {
    output.writeFieldBegin('second', Thrift.Type.STRING, 2);
    output.writeString(this.second);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompareHyperParametersResponse = module.exports.CompareHyperParametersResponse = function(args) {
  this.model1OnlyHyperparams = null;
  this.model2OnlyHyperparams = null;
  this.sharedHyperparams = null;
  if (args) {
    if (args.model1OnlyHyperparams !== undefined && args.model1OnlyHyperparams !== null) {
      this.model1OnlyHyperparams = Thrift.copyMap(args.model1OnlyHyperparams, [null]);
    }
    if (args.model2OnlyHyperparams !== undefined && args.model2OnlyHyperparams !== null) {
      this.model2OnlyHyperparams = Thrift.copyMap(args.model2OnlyHyperparams, [null]);
    }
    if (args.sharedHyperparams !== undefined && args.sharedHyperparams !== null) {
      this.sharedHyperparams = Thrift.copyMap(args.sharedHyperparams, [ttypes.StringPair]);
    }
  }
};
CompareHyperParametersResponse.prototype = {};
CompareHyperParametersResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size160 = 0;
        var _rtmp3164;
        this.model1OnlyHyperparams = {};
        var _ktype161 = 0;
        var _vtype162 = 0;
        _rtmp3164 = input.readMapBegin();
        _ktype161 = _rtmp3164.ktype;
        _vtype162 = _rtmp3164.vtype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var key166 = null;
          var val167 = null;
          key166 = input.readString();
          val167 = input.readString();
          this.model1OnlyHyperparams[key166] = val167;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size168 = 0;
        var _rtmp3172;
        this.model2OnlyHyperparams = {};
        var _ktype169 = 0;
        var _vtype170 = 0;
        _rtmp3172 = input.readMapBegin();
        _ktype169 = _rtmp3172.ktype;
        _vtype170 = _rtmp3172.vtype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var key174 = null;
          var val175 = null;
          key174 = input.readString();
          val175 = input.readString();
          this.model2OnlyHyperparams[key174] = val175;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size176 = 0;
        var _rtmp3180;
        this.sharedHyperparams = {};
        var _ktype177 = 0;
        var _vtype178 = 0;
        _rtmp3180 = input.readMapBegin();
        _ktype177 = _rtmp3180.ktype;
        _vtype178 = _rtmp3180.vtype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var key182 = null;
          var val183 = null;
          key182 = input.readString();
          val183 = new ttypes.StringPair();
          val183.read(input);
          this.sharedHyperparams[key182] = val183;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompareHyperParametersResponse.prototype.write = function(output) {
  output.writeStructBegin('CompareHyperParametersResponse');
  if (this.model1OnlyHyperparams !== null && this.model1OnlyHyperparams !== undefined) {
    output.writeFieldBegin('model1OnlyHyperparams', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.model1OnlyHyperparams));
    for (var kiter184 in this.model1OnlyHyperparams)
    {
      if (this.model1OnlyHyperparams.hasOwnProperty(kiter184))
      {
        var viter185 = this.model1OnlyHyperparams[kiter184];
        output.writeString(kiter184);
        output.writeString(viter185);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.model2OnlyHyperparams !== null && this.model2OnlyHyperparams !== undefined) {
    output.writeFieldBegin('model2OnlyHyperparams', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.model2OnlyHyperparams));
    for (var kiter186 in this.model2OnlyHyperparams)
    {
      if (this.model2OnlyHyperparams.hasOwnProperty(kiter186))
      {
        var viter187 = this.model2OnlyHyperparams[kiter186];
        output.writeString(kiter186);
        output.writeString(viter187);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.sharedHyperparams !== null && this.sharedHyperparams !== undefined) {
    output.writeFieldBegin('sharedHyperparams', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.sharedHyperparams));
    for (var kiter188 in this.sharedHyperparams)
    {
      if (this.sharedHyperparams.hasOwnProperty(kiter188))
      {
        var viter189 = this.sharedHyperparams[kiter188];
        output.writeString(kiter188);
        viter189.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompareFeaturesResponse = module.exports.CompareFeaturesResponse = function(args) {
  this.model1OnlyFeatures = null;
  this.model2OnlyFeatures = null;
  this.commonFeatures = null;
  if (args) {
    if (args.model1OnlyFeatures !== undefined && args.model1OnlyFeatures !== null) {
      this.model1OnlyFeatures = Thrift.copyList(args.model1OnlyFeatures, [null]);
    }
    if (args.model2OnlyFeatures !== undefined && args.model2OnlyFeatures !== null) {
      this.model2OnlyFeatures = Thrift.copyList(args.model2OnlyFeatures, [null]);
    }
    if (args.commonFeatures !== undefined && args.commonFeatures !== null) {
      this.commonFeatures = Thrift.copyList(args.commonFeatures, [null]);
    }
  }
};
CompareFeaturesResponse.prototype = {};
CompareFeaturesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size190 = 0;
        var _rtmp3194;
        this.model1OnlyFeatures = [];
        var _etype193 = 0;
        _rtmp3194 = input.readListBegin();
        _etype193 = _rtmp3194.etype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          var elem196 = null;
          elem196 = input.readString();
          this.model1OnlyFeatures.push(elem196);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size197 = 0;
        var _rtmp3201;
        this.model2OnlyFeatures = [];
        var _etype200 = 0;
        _rtmp3201 = input.readListBegin();
        _etype200 = _rtmp3201.etype;
        _size197 = _rtmp3201.size;
        for (var _i202 = 0; _i202 < _size197; ++_i202)
        {
          var elem203 = null;
          elem203 = input.readString();
          this.model2OnlyFeatures.push(elem203);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size204 = 0;
        var _rtmp3208;
        this.commonFeatures = [];
        var _etype207 = 0;
        _rtmp3208 = input.readListBegin();
        _etype207 = _rtmp3208.etype;
        _size204 = _rtmp3208.size;
        for (var _i209 = 0; _i209 < _size204; ++_i209)
        {
          var elem210 = null;
          elem210 = input.readString();
          this.commonFeatures.push(elem210);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompareFeaturesResponse.prototype.write = function(output) {
  output.writeStructBegin('CompareFeaturesResponse');
  if (this.model1OnlyFeatures !== null && this.model1OnlyFeatures !== undefined) {
    output.writeFieldBegin('model1OnlyFeatures', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.model1OnlyFeatures.length);
    for (var iter211 in this.model1OnlyFeatures)
    {
      if (this.model1OnlyFeatures.hasOwnProperty(iter211))
      {
        iter211 = this.model1OnlyFeatures[iter211];
        output.writeString(iter211);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.model2OnlyFeatures !== null && this.model2OnlyFeatures !== undefined) {
    output.writeFieldBegin('model2OnlyFeatures', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.model2OnlyFeatures.length);
    for (var iter212 in this.model2OnlyFeatures)
    {
      if (this.model2OnlyFeatures.hasOwnProperty(iter212))
      {
        iter212 = this.model2OnlyFeatures[iter212];
        output.writeString(iter212);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.commonFeatures !== null && this.commonFeatures !== undefined) {
    output.writeFieldBegin('commonFeatures', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.commonFeatures.length);
    for (var iter213 in this.commonFeatures)
    {
      if (this.commonFeatures.hasOwnProperty(iter213))
      {
        iter213 = this.commonFeatures[iter213];
        output.writeString(iter213);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FeatureImportanceComparison = module.exports.FeatureImportanceComparison = function(args) {
  this.featureName = null;
  this.percentileRankInModel1 = null;
  this.percentileRankInModel2 = null;
  if (args) {
    if (args.featureName !== undefined && args.featureName !== null) {
      this.featureName = args.featureName;
    }
    if (args.percentileRankInModel1 !== undefined && args.percentileRankInModel1 !== null) {
      this.percentileRankInModel1 = args.percentileRankInModel1;
    }
    if (args.percentileRankInModel2 !== undefined && args.percentileRankInModel2 !== null) {
      this.percentileRankInModel2 = args.percentileRankInModel2;
    }
  }
};
FeatureImportanceComparison.prototype = {};
FeatureImportanceComparison.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.percentileRankInModel1 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.percentileRankInModel2 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FeatureImportanceComparison.prototype.write = function(output) {
  output.writeStructBegin('FeatureImportanceComparison');
  if (this.featureName !== null && this.featureName !== undefined) {
    output.writeFieldBegin('featureName', Thrift.Type.STRING, 1);
    output.writeString(this.featureName);
    output.writeFieldEnd();
  }
  if (this.percentileRankInModel1 !== null && this.percentileRankInModel1 !== undefined) {
    output.writeFieldBegin('percentileRankInModel1', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.percentileRankInModel1);
    output.writeFieldEnd();
  }
  if (this.percentileRankInModel2 !== null && this.percentileRankInModel2 !== undefined) {
    output.writeFieldBegin('percentileRankInModel2', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.percentileRankInModel2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConfidenceInterval = module.exports.ConfidenceInterval = function(args) {
  this.featureIndex = null;
  this.low = null;
  this.high = null;
  if (args) {
    if (args.featureIndex !== undefined && args.featureIndex !== null) {
      this.featureIndex = args.featureIndex;
    }
    if (args.low !== undefined && args.low !== null) {
      this.low = args.low;
    }
    if (args.high !== undefined && args.high !== null) {
      this.high = args.high;
    }
  }
};
ConfidenceInterval.prototype = {};
ConfidenceInterval.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.featureIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.low = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.high = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfidenceInterval.prototype.write = function(output) {
  output.writeStructBegin('ConfidenceInterval');
  if (this.featureIndex !== null && this.featureIndex !== undefined) {
    output.writeFieldBegin('featureIndex', Thrift.Type.I32, 1);
    output.writeI32(this.featureIndex);
    output.writeFieldEnd();
  }
  if (this.low !== null && this.low !== undefined) {
    output.writeFieldBegin('low', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.low);
    output.writeFieldEnd();
  }
  if (this.high !== null && this.high !== undefined) {
    output.writeFieldBegin('high', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.high);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProjectExperimentsAndRuns = module.exports.ProjectExperimentsAndRuns = function(args) {
  this.projId = null;
  this.experiments = null;
  this.experimentRuns = null;
  if (args) {
    if (args.projId !== undefined && args.projId !== null) {
      this.projId = args.projId;
    }
    if (args.experiments !== undefined && args.experiments !== null) {
      this.experiments = Thrift.copyList(args.experiments, [ttypes.Experiment]);
    }
    if (args.experimentRuns !== undefined && args.experimentRuns !== null) {
      this.experimentRuns = Thrift.copyList(args.experimentRuns, [ttypes.ExperimentRun]);
    }
  }
};
ProjectExperimentsAndRuns.prototype = {};
ProjectExperimentsAndRuns.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.projId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size214 = 0;
        var _rtmp3218;
        this.experiments = [];
        var _etype217 = 0;
        _rtmp3218 = input.readListBegin();
        _etype217 = _rtmp3218.etype;
        _size214 = _rtmp3218.size;
        for (var _i219 = 0; _i219 < _size214; ++_i219)
        {
          var elem220 = null;
          elem220 = new ttypes.Experiment();
          elem220.read(input);
          this.experiments.push(elem220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size221 = 0;
        var _rtmp3225;
        this.experimentRuns = [];
        var _etype224 = 0;
        _rtmp3225 = input.readListBegin();
        _etype224 = _rtmp3225.etype;
        _size221 = _rtmp3225.size;
        for (var _i226 = 0; _i226 < _size221; ++_i226)
        {
          var elem227 = null;
          elem227 = new ttypes.ExperimentRun();
          elem227.read(input);
          this.experimentRuns.push(elem227);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectExperimentsAndRuns.prototype.write = function(output) {
  output.writeStructBegin('ProjectExperimentsAndRuns');
  if (this.projId !== null && this.projId !== undefined) {
    output.writeFieldBegin('projId', Thrift.Type.I32, 1);
    output.writeI32(this.projId);
    output.writeFieldEnd();
  }
  if (this.experiments !== null && this.experiments !== undefined) {
    output.writeFieldBegin('experiments', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.experiments.length);
    for (var iter228 in this.experiments)
    {
      if (this.experiments.hasOwnProperty(iter228))
      {
        iter228 = this.experiments[iter228];
        iter228.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRuns !== null && this.experimentRuns !== undefined) {
    output.writeFieldBegin('experimentRuns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.experimentRuns.length);
    for (var iter229 in this.experimentRuns)
    {
      if (this.experimentRuns.hasOwnProperty(iter229))
      {
        iter229 = this.experimentRuns[iter229];
        iter229.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProjectOverviewResponse = module.exports.ProjectOverviewResponse = function(args) {
  this.project = null;
  this.numExperiments = null;
  this.numExperimentRuns = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.Project(args.project);
    }
    if (args.numExperiments !== undefined && args.numExperiments !== null) {
      this.numExperiments = args.numExperiments;
    }
    if (args.numExperimentRuns !== undefined && args.numExperimentRuns !== null) {
      this.numExperimentRuns = args.numExperimentRuns;
    }
  }
};
ProjectOverviewResponse.prototype = {};
ProjectOverviewResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.Project();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numExperiments = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numExperimentRuns = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectOverviewResponse.prototype.write = function(output) {
  output.writeStructBegin('ProjectOverviewResponse');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.numExperiments !== null && this.numExperiments !== undefined) {
    output.writeFieldBegin('numExperiments', Thrift.Type.I32, 2);
    output.writeI32(this.numExperiments);
    output.writeFieldEnd();
  }
  if (this.numExperimentRuns !== null && this.numExperimentRuns !== undefined) {
    output.writeFieldBegin('numExperimentRuns', Thrift.Type.I32, 3);
    output.writeI32(this.numExperimentRuns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelResponse = module.exports.ModelResponse = function(args) {
  this.id = null;
  this.experimentRunId = null;
  this.experimentId = null;
  this.projectId = null;
  this.trainingDataFrame = null;
  this.specification = null;
  this.problemType = null;
  this.featureColumns = null;
  this.labelColumns = null;
  this.predictionColumns = null;
  this.metrics = null;
  this.annotations = null;
  this.sha = null;
  this.filepath = null;
  this.timestamp = null;
  this.linearModelData = null;
  this.metadata = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
    if (args.experimentId !== undefined && args.experimentId !== null) {
      this.experimentId = args.experimentId;
    }
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    }
    if (args.trainingDataFrame !== undefined && args.trainingDataFrame !== null) {
      this.trainingDataFrame = new ttypes.DataFrame(args.trainingDataFrame);
    }
    if (args.specification !== undefined && args.specification !== null) {
      this.specification = new ttypes.TransformerSpec(args.specification);
    }
    if (args.problemType !== undefined && args.problemType !== null) {
      this.problemType = args.problemType;
    }
    if (args.featureColumns !== undefined && args.featureColumns !== null) {
      this.featureColumns = Thrift.copyList(args.featureColumns, [null]);
    }
    if (args.labelColumns !== undefined && args.labelColumns !== null) {
      this.labelColumns = Thrift.copyList(args.labelColumns, [null]);
    }
    if (args.predictionColumns !== undefined && args.predictionColumns !== null) {
      this.predictionColumns = Thrift.copyList(args.predictionColumns, [null]);
    }
    if (args.metrics !== undefined && args.metrics !== null) {
      this.metrics = Thrift.copyMap(args.metrics, [Thrift.copyMap, null]);
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [null]);
    }
    if (args.sha !== undefined && args.sha !== null) {
      this.sha = args.sha;
    }
    if (args.filepath !== undefined && args.filepath !== null) {
      this.filepath = args.filepath;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.linearModelData !== undefined && args.linearModelData !== null) {
      this.linearModelData = new ttypes.LinearModel(args.linearModelData);
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = args.metadata;
    }
  }
};
ModelResponse.prototype = {};
ModelResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.experimentId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.projectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.trainingDataFrame = new ttypes.DataFrame();
        this.trainingDataFrame.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.specification = new ttypes.TransformerSpec();
        this.specification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.problemType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size230 = 0;
        var _rtmp3234;
        this.featureColumns = [];
        var _etype233 = 0;
        _rtmp3234 = input.readListBegin();
        _etype233 = _rtmp3234.etype;
        _size230 = _rtmp3234.size;
        for (var _i235 = 0; _i235 < _size230; ++_i235)
        {
          var elem236 = null;
          elem236 = input.readString();
          this.featureColumns.push(elem236);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size237 = 0;
        var _rtmp3241;
        this.labelColumns = [];
        var _etype240 = 0;
        _rtmp3241 = input.readListBegin();
        _etype240 = _rtmp3241.etype;
        _size237 = _rtmp3241.size;
        for (var _i242 = 0; _i242 < _size237; ++_i242)
        {
          var elem243 = null;
          elem243 = input.readString();
          this.labelColumns.push(elem243);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size244 = 0;
        var _rtmp3248;
        this.predictionColumns = [];
        var _etype247 = 0;
        _rtmp3248 = input.readListBegin();
        _etype247 = _rtmp3248.etype;
        _size244 = _rtmp3248.size;
        for (var _i249 = 0; _i249 < _size244; ++_i249)
        {
          var elem250 = null;
          elem250 = input.readString();
          this.predictionColumns.push(elem250);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        var _size251 = 0;
        var _rtmp3255;
        this.metrics = {};
        var _ktype252 = 0;
        var _vtype253 = 0;
        _rtmp3255 = input.readMapBegin();
        _ktype252 = _rtmp3255.ktype;
        _vtype253 = _rtmp3255.vtype;
        _size251 = _rtmp3255.size;
        for (var _i256 = 0; _i256 < _size251; ++_i256)
        {
          var key257 = null;
          var val258 = null;
          key257 = input.readString();
          var _size259 = 0;
          var _rtmp3263;
          val258 = {};
          var _ktype260 = 0;
          var _vtype261 = 0;
          _rtmp3263 = input.readMapBegin();
          _ktype260 = _rtmp3263.ktype;
          _vtype261 = _rtmp3263.vtype;
          _size259 = _rtmp3263.size;
          for (var _i264 = 0; _i264 < _size259; ++_i264)
          {
            var key265 = null;
            var val266 = null;
            key265 = input.readI32();
            val266 = input.readDouble();
            val258[key265] = val266;
          }
          input.readMapEnd();
          this.metrics[key257] = val258;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size267 = 0;
        var _rtmp3271;
        this.annotations = [];
        var _etype270 = 0;
        _rtmp3271 = input.readListBegin();
        _etype270 = _rtmp3271.etype;
        _size267 = _rtmp3271.size;
        for (var _i272 = 0; _i272 < _size267; ++_i272)
        {
          var elem273 = null;
          elem273 = input.readString();
          this.annotations.push(elem273);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.sha = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.filepath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.linearModelData = new ttypes.LinearModel();
        this.linearModelData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelResponse.prototype.write = function(output) {
  output.writeStructBegin('ModelResponse');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 2);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  if (this.experimentId !== null && this.experimentId !== undefined) {
    output.writeFieldBegin('experimentId', Thrift.Type.I32, 3);
    output.writeI32(this.experimentId);
    output.writeFieldEnd();
  }
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.I32, 4);
    output.writeI32(this.projectId);
    output.writeFieldEnd();
  }
  if (this.trainingDataFrame !== null && this.trainingDataFrame !== undefined) {
    output.writeFieldBegin('trainingDataFrame', Thrift.Type.STRUCT, 5);
    this.trainingDataFrame.write(output);
    output.writeFieldEnd();
  }
  if (this.specification !== null && this.specification !== undefined) {
    output.writeFieldBegin('specification', Thrift.Type.STRUCT, 6);
    this.specification.write(output);
    output.writeFieldEnd();
  }
  if (this.problemType !== null && this.problemType !== undefined) {
    output.writeFieldBegin('problemType', Thrift.Type.I32, 7);
    output.writeI32(this.problemType);
    output.writeFieldEnd();
  }
  if (this.featureColumns !== null && this.featureColumns !== undefined) {
    output.writeFieldBegin('featureColumns', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.featureColumns.length);
    for (var iter274 in this.featureColumns)
    {
      if (this.featureColumns.hasOwnProperty(iter274))
      {
        iter274 = this.featureColumns[iter274];
        output.writeString(iter274);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.labelColumns !== null && this.labelColumns !== undefined) {
    output.writeFieldBegin('labelColumns', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.labelColumns.length);
    for (var iter275 in this.labelColumns)
    {
      if (this.labelColumns.hasOwnProperty(iter275))
      {
        iter275 = this.labelColumns[iter275];
        output.writeString(iter275);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.predictionColumns !== null && this.predictionColumns !== undefined) {
    output.writeFieldBegin('predictionColumns', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.predictionColumns.length);
    for (var iter276 in this.predictionColumns)
    {
      if (this.predictionColumns.hasOwnProperty(iter276))
      {
        iter276 = this.predictionColumns[iter276];
        output.writeString(iter276);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.metrics !== null && this.metrics !== undefined) {
    output.writeFieldBegin('metrics', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.metrics));
    for (var kiter277 in this.metrics)
    {
      if (this.metrics.hasOwnProperty(kiter277))
      {
        var viter278 = this.metrics[kiter277];
        output.writeString(kiter277);
        output.writeMapBegin(Thrift.Type.I32, Thrift.Type.DOUBLE, Thrift.objectLength(viter278));
        for (var kiter279 in viter278)
        {
          if (viter278.hasOwnProperty(kiter279))
          {
            var viter280 = viter278[kiter279];
            output.writeI32(kiter279);
            output.writeDouble(viter280);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.annotations.length);
    for (var iter281 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter281))
      {
        iter281 = this.annotations[iter281];
        output.writeString(iter281);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sha !== null && this.sha !== undefined) {
    output.writeFieldBegin('sha', Thrift.Type.STRING, 13);
    output.writeString(this.sha);
    output.writeFieldEnd();
  }
  if (this.filepath !== null && this.filepath !== undefined) {
    output.writeFieldBegin('filepath', Thrift.Type.STRING, 14);
    output.writeString(this.filepath);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 15);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.linearModelData !== null && this.linearModelData !== undefined) {
    output.writeFieldBegin('linearModelData', Thrift.Type.STRUCT, 16);
    this.linearModelData.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRING, 17);
    output.writeString(this.metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentRunDetailsResponse = module.exports.ExperimentRunDetailsResponse = function(args) {
  this.project = null;
  this.experiment = null;
  this.experimentRun = null;
  this.modelResponses = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.Project(args.project);
    }
    if (args.experiment !== undefined && args.experiment !== null) {
      this.experiment = new ttypes.Experiment(args.experiment);
    }
    if (args.experimentRun !== undefined && args.experimentRun !== null) {
      this.experimentRun = new ttypes.ExperimentRun(args.experimentRun);
    }
    if (args.modelResponses !== undefined && args.modelResponses !== null) {
      this.modelResponses = Thrift.copyList(args.modelResponses, [ttypes.ModelResponse]);
    }
  }
};
ExperimentRunDetailsResponse.prototype = {};
ExperimentRunDetailsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.Project();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.experiment = new ttypes.Experiment();
        this.experiment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.experimentRun = new ttypes.ExperimentRun();
        this.experimentRun.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size282 = 0;
        var _rtmp3286;
        this.modelResponses = [];
        var _etype285 = 0;
        _rtmp3286 = input.readListBegin();
        _etype285 = _rtmp3286.etype;
        _size282 = _rtmp3286.size;
        for (var _i287 = 0; _i287 < _size282; ++_i287)
        {
          var elem288 = null;
          elem288 = new ttypes.ModelResponse();
          elem288.read(input);
          this.modelResponses.push(elem288);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentRunDetailsResponse.prototype.write = function(output) {
  output.writeStructBegin('ExperimentRunDetailsResponse');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.experiment !== null && this.experiment !== undefined) {
    output.writeFieldBegin('experiment', Thrift.Type.STRUCT, 2);
    this.experiment.write(output);
    output.writeFieldEnd();
  }
  if (this.experimentRun !== null && this.experimentRun !== undefined) {
    output.writeFieldBegin('experimentRun', Thrift.Type.STRUCT, 3);
    this.experimentRun.write(output);
    output.writeFieldEnd();
  }
  if (this.modelResponses !== null && this.modelResponses !== undefined) {
    output.writeFieldBegin('modelResponses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.modelResponses.length);
    for (var iter289 in this.modelResponses)
    {
      if (this.modelResponses.hasOwnProperty(iter289))
      {
        iter289 = this.modelResponses[iter289];
        iter289.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CrossValidationFold = module.exports.CrossValidationFold = function(args) {
  this.model = null;
  this.validationDf = null;
  this.trainingDf = null;
  this.score = null;
  if (args) {
    if (args.model !== undefined && args.model !== null) {
      this.model = new ttypes.Transformer(args.model);
    }
    if (args.validationDf !== undefined && args.validationDf !== null) {
      this.validationDf = new ttypes.DataFrame(args.validationDf);
    }
    if (args.trainingDf !== undefined && args.trainingDf !== null) {
      this.trainingDf = new ttypes.DataFrame(args.trainingDf);
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
  }
};
CrossValidationFold.prototype = {};
CrossValidationFold.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ttypes.Transformer();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.validationDf = new ttypes.DataFrame();
        this.validationDf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.trainingDf = new ttypes.DataFrame();
        this.trainingDf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CrossValidationFold.prototype.write = function(output) {
  output.writeStructBegin('CrossValidationFold');
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 1);
    this.model.write(output);
    output.writeFieldEnd();
  }
  if (this.validationDf !== null && this.validationDf !== undefined) {
    output.writeFieldBegin('validationDf', Thrift.Type.STRUCT, 2);
    this.validationDf.write(output);
    output.writeFieldEnd();
  }
  if (this.trainingDf !== null && this.trainingDf !== undefined) {
    output.writeFieldBegin('trainingDf', Thrift.Type.STRUCT, 3);
    this.trainingDf.write(output);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CrossValidationFoldResponse = module.exports.CrossValidationFoldResponse = function(args) {
  this.modelId = null;
  this.validationId = null;
  this.trainingId = null;
  if (args) {
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
    if (args.validationId !== undefined && args.validationId !== null) {
      this.validationId = args.validationId;
    }
    if (args.trainingId !== undefined && args.trainingId !== null) {
      this.trainingId = args.trainingId;
    }
  }
};
CrossValidationFoldResponse.prototype = {};
CrossValidationFoldResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.validationId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.trainingId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CrossValidationFoldResponse.prototype.write = function(output) {
  output.writeStructBegin('CrossValidationFoldResponse');
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 1);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  if (this.validationId !== null && this.validationId !== undefined) {
    output.writeFieldBegin('validationId', Thrift.Type.I32, 2);
    output.writeI32(this.validationId);
    output.writeFieldEnd();
  }
  if (this.trainingId !== null && this.trainingId !== undefined) {
    output.writeFieldBegin('trainingId', Thrift.Type.I32, 3);
    output.writeI32(this.trainingId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CrossValidationEvent = module.exports.CrossValidationEvent = function(args) {
  this.df = null;
  this.spec = null;
  this.seed = null;
  this.evaluator = null;
  this.labelColumns = null;
  this.predictionColumns = null;
  this.featureColumns = null;
  this.folds = null;
  this.experimentRunId = null;
  this.problemType = 0;
  if (args) {
    if (args.df !== undefined && args.df !== null) {
      this.df = new ttypes.DataFrame(args.df);
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new ttypes.TransformerSpec(args.spec);
    }
    if (args.seed !== undefined && args.seed !== null) {
      this.seed = args.seed;
    }
    if (args.evaluator !== undefined && args.evaluator !== null) {
      this.evaluator = args.evaluator;
    }
    if (args.labelColumns !== undefined && args.labelColumns !== null) {
      this.labelColumns = Thrift.copyList(args.labelColumns, [null]);
    }
    if (args.predictionColumns !== undefined && args.predictionColumns !== null) {
      this.predictionColumns = Thrift.copyList(args.predictionColumns, [null]);
    }
    if (args.featureColumns !== undefined && args.featureColumns !== null) {
      this.featureColumns = Thrift.copyList(args.featureColumns, [null]);
    }
    if (args.folds !== undefined && args.folds !== null) {
      this.folds = Thrift.copyList(args.folds, [ttypes.CrossValidationFold]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
    if (args.problemType !== undefined && args.problemType !== null) {
      this.problemType = args.problemType;
    }
  }
};
CrossValidationEvent.prototype = {};
CrossValidationEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.df = new ttypes.DataFrame();
        this.df.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new ttypes.TransformerSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.seed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.evaluator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size290 = 0;
        var _rtmp3294;
        this.labelColumns = [];
        var _etype293 = 0;
        _rtmp3294 = input.readListBegin();
        _etype293 = _rtmp3294.etype;
        _size290 = _rtmp3294.size;
        for (var _i295 = 0; _i295 < _size290; ++_i295)
        {
          var elem296 = null;
          elem296 = input.readString();
          this.labelColumns.push(elem296);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size297 = 0;
        var _rtmp3301;
        this.predictionColumns = [];
        var _etype300 = 0;
        _rtmp3301 = input.readListBegin();
        _etype300 = _rtmp3301.etype;
        _size297 = _rtmp3301.size;
        for (var _i302 = 0; _i302 < _size297; ++_i302)
        {
          var elem303 = null;
          elem303 = input.readString();
          this.predictionColumns.push(elem303);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size304 = 0;
        var _rtmp3308;
        this.featureColumns = [];
        var _etype307 = 0;
        _rtmp3308 = input.readListBegin();
        _etype307 = _rtmp3308.etype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var elem310 = null;
          elem310 = input.readString();
          this.featureColumns.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size311 = 0;
        var _rtmp3315;
        this.folds = [];
        var _etype314 = 0;
        _rtmp3315 = input.readListBegin();
        _etype314 = _rtmp3315.etype;
        _size311 = _rtmp3315.size;
        for (var _i316 = 0; _i316 < _size311; ++_i316)
        {
          var elem317 = null;
          elem317 = new ttypes.CrossValidationFold();
          elem317.read(input);
          this.folds.push(elem317);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.problemType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CrossValidationEvent.prototype.write = function(output) {
  output.writeStructBegin('CrossValidationEvent');
  if (this.df !== null && this.df !== undefined) {
    output.writeFieldBegin('df', Thrift.Type.STRUCT, 1);
    this.df.write(output);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  if (this.seed !== null && this.seed !== undefined) {
    output.writeFieldBegin('seed', Thrift.Type.I64, 3);
    output.writeI64(this.seed);
    output.writeFieldEnd();
  }
  if (this.evaluator !== null && this.evaluator !== undefined) {
    output.writeFieldBegin('evaluator', Thrift.Type.STRING, 4);
    output.writeString(this.evaluator);
    output.writeFieldEnd();
  }
  if (this.labelColumns !== null && this.labelColumns !== undefined) {
    output.writeFieldBegin('labelColumns', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.labelColumns.length);
    for (var iter318 in this.labelColumns)
    {
      if (this.labelColumns.hasOwnProperty(iter318))
      {
        iter318 = this.labelColumns[iter318];
        output.writeString(iter318);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.predictionColumns !== null && this.predictionColumns !== undefined) {
    output.writeFieldBegin('predictionColumns', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.predictionColumns.length);
    for (var iter319 in this.predictionColumns)
    {
      if (this.predictionColumns.hasOwnProperty(iter319))
      {
        iter319 = this.predictionColumns[iter319];
        output.writeString(iter319);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.featureColumns !== null && this.featureColumns !== undefined) {
    output.writeFieldBegin('featureColumns', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.featureColumns.length);
    for (var iter320 in this.featureColumns)
    {
      if (this.featureColumns.hasOwnProperty(iter320))
      {
        iter320 = this.featureColumns[iter320];
        output.writeString(iter320);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.folds !== null && this.folds !== undefined) {
    output.writeFieldBegin('folds', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.folds.length);
    for (var iter321 in this.folds)
    {
      if (this.folds.hasOwnProperty(iter321))
      {
        iter321 = this.folds[iter321];
        iter321.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 9);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  if (this.problemType !== null && this.problemType !== undefined) {
    output.writeFieldBegin('problemType', Thrift.Type.I32, 10);
    output.writeI32(this.problemType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CrossValidationEventResponse = module.exports.CrossValidationEventResponse = function(args) {
  this.dfId = null;
  this.specId = null;
  this.eventId = null;
  this.foldResponses = null;
  this.crossValidationEventId = null;
  if (args) {
    if (args.dfId !== undefined && args.dfId !== null) {
      this.dfId = args.dfId;
    }
    if (args.specId !== undefined && args.specId !== null) {
      this.specId = args.specId;
    }
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
    if (args.foldResponses !== undefined && args.foldResponses !== null) {
      this.foldResponses = Thrift.copyList(args.foldResponses, [ttypes.CrossValidationFoldResponse]);
    }
    if (args.crossValidationEventId !== undefined && args.crossValidationEventId !== null) {
      this.crossValidationEventId = args.crossValidationEventId;
    }
  }
};
CrossValidationEventResponse.prototype = {};
CrossValidationEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dfId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.specId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size322 = 0;
        var _rtmp3326;
        this.foldResponses = [];
        var _etype325 = 0;
        _rtmp3326 = input.readListBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = new ttypes.CrossValidationFoldResponse();
          elem328.read(input);
          this.foldResponses.push(elem328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.crossValidationEventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CrossValidationEventResponse.prototype.write = function(output) {
  output.writeStructBegin('CrossValidationEventResponse');
  if (this.dfId !== null && this.dfId !== undefined) {
    output.writeFieldBegin('dfId', Thrift.Type.I32, 1);
    output.writeI32(this.dfId);
    output.writeFieldEnd();
  }
  if (this.specId !== null && this.specId !== undefined) {
    output.writeFieldBegin('specId', Thrift.Type.I32, 2);
    output.writeI32(this.specId);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I32, 3);
    output.writeI32(this.eventId);
    output.writeFieldEnd();
  }
  if (this.foldResponses !== null && this.foldResponses !== undefined) {
    output.writeFieldBegin('foldResponses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.foldResponses.length);
    for (var iter329 in this.foldResponses)
    {
      if (this.foldResponses.hasOwnProperty(iter329))
      {
        iter329 = this.foldResponses[iter329];
        iter329.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.crossValidationEventId !== null && this.crossValidationEventId !== undefined) {
    output.writeFieldBegin('crossValidationEventId', Thrift.Type.I32, 5);
    output.writeI32(this.crossValidationEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GridSearchCrossValidationEvent = module.exports.GridSearchCrossValidationEvent = function(args) {
  this.numFolds = null;
  this.bestFit = null;
  this.crossValidations = null;
  this.experimentRunId = null;
  this.problemType = 0;
  if (args) {
    if (args.numFolds !== undefined && args.numFolds !== null) {
      this.numFolds = args.numFolds;
    }
    if (args.bestFit !== undefined && args.bestFit !== null) {
      this.bestFit = new ttypes.FitEvent(args.bestFit);
    }
    if (args.crossValidations !== undefined && args.crossValidations !== null) {
      this.crossValidations = Thrift.copyList(args.crossValidations, [ttypes.CrossValidationEvent]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
    if (args.problemType !== undefined && args.problemType !== null) {
      this.problemType = args.problemType;
    }
  }
};
GridSearchCrossValidationEvent.prototype = {};
GridSearchCrossValidationEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numFolds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.bestFit = new ttypes.FitEvent();
        this.bestFit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size330 = 0;
        var _rtmp3334;
        this.crossValidations = [];
        var _etype333 = 0;
        _rtmp3334 = input.readListBegin();
        _etype333 = _rtmp3334.etype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var elem336 = null;
          elem336 = new ttypes.CrossValidationEvent();
          elem336.read(input);
          this.crossValidations.push(elem336);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.problemType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GridSearchCrossValidationEvent.prototype.write = function(output) {
  output.writeStructBegin('GridSearchCrossValidationEvent');
  if (this.numFolds !== null && this.numFolds !== undefined) {
    output.writeFieldBegin('numFolds', Thrift.Type.I32, 1);
    output.writeI32(this.numFolds);
    output.writeFieldEnd();
  }
  if (this.bestFit !== null && this.bestFit !== undefined) {
    output.writeFieldBegin('bestFit', Thrift.Type.STRUCT, 2);
    this.bestFit.write(output);
    output.writeFieldEnd();
  }
  if (this.crossValidations !== null && this.crossValidations !== undefined) {
    output.writeFieldBegin('crossValidations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.crossValidations.length);
    for (var iter337 in this.crossValidations)
    {
      if (this.crossValidations.hasOwnProperty(iter337))
      {
        iter337 = this.crossValidations[iter337];
        iter337.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 4);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  if (this.problemType !== null && this.problemType !== undefined) {
    output.writeFieldBegin('problemType', Thrift.Type.I32, 5);
    output.writeI32(this.problemType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GridSearchCrossValidationEventResponse = module.exports.GridSearchCrossValidationEventResponse = function(args) {
  this.gscveId = null;
  this.eventId = null;
  this.fitEventResponse = null;
  this.crossValidationEventResponses = null;
  if (args) {
    if (args.gscveId !== undefined && args.gscveId !== null) {
      this.gscveId = args.gscveId;
    }
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
    if (args.fitEventResponse !== undefined && args.fitEventResponse !== null) {
      this.fitEventResponse = new ttypes.FitEventResponse(args.fitEventResponse);
    }
    if (args.crossValidationEventResponses !== undefined && args.crossValidationEventResponses !== null) {
      this.crossValidationEventResponses = Thrift.copyList(args.crossValidationEventResponses, [ttypes.CrossValidationEventResponse]);
    }
  }
};
GridSearchCrossValidationEventResponse.prototype = {};
GridSearchCrossValidationEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.gscveId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fitEventResponse = new ttypes.FitEventResponse();
        this.fitEventResponse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size338 = 0;
        var _rtmp3342;
        this.crossValidationEventResponses = [];
        var _etype341 = 0;
        _rtmp3342 = input.readListBegin();
        _etype341 = _rtmp3342.etype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          var elem344 = null;
          elem344 = new ttypes.CrossValidationEventResponse();
          elem344.read(input);
          this.crossValidationEventResponses.push(elem344);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GridSearchCrossValidationEventResponse.prototype.write = function(output) {
  output.writeStructBegin('GridSearchCrossValidationEventResponse');
  if (this.gscveId !== null && this.gscveId !== undefined) {
    output.writeFieldBegin('gscveId', Thrift.Type.I32, 1);
    output.writeI32(this.gscveId);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I32, 2);
    output.writeI32(this.eventId);
    output.writeFieldEnd();
  }
  if (this.fitEventResponse !== null && this.fitEventResponse !== undefined) {
    output.writeFieldBegin('fitEventResponse', Thrift.Type.STRUCT, 3);
    this.fitEventResponse.write(output);
    output.writeFieldEnd();
  }
  if (this.crossValidationEventResponses !== null && this.crossValidationEventResponses !== undefined) {
    output.writeFieldBegin('crossValidationEventResponses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.crossValidationEventResponses.length);
    for (var iter345 in this.crossValidationEventResponses)
    {
      if (this.crossValidationEventResponses.hasOwnProperty(iter345))
      {
        iter345 = this.crossValidationEventResponses[iter345];
        iter345.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TreeNode = module.exports.TreeNode = function(args) {
  this.prediction = null;
  this.impurity = null;
  this.gain = null;
  this.splitIndex = null;
  if (args) {
    if (args.prediction !== undefined && args.prediction !== null) {
      this.prediction = args.prediction;
    }
    if (args.impurity !== undefined && args.impurity !== null) {
      this.impurity = args.impurity;
    }
    if (args.gain !== undefined && args.gain !== null) {
      this.gain = args.gain;
    }
    if (args.splitIndex !== undefined && args.splitIndex !== null) {
      this.splitIndex = args.splitIndex;
    }
  }
};
TreeNode.prototype = {};
TreeNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.prediction = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.impurity = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.gain = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.splitIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TreeNode.prototype.write = function(output) {
  output.writeStructBegin('TreeNode');
  if (this.prediction !== null && this.prediction !== undefined) {
    output.writeFieldBegin('prediction', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.prediction);
    output.writeFieldEnd();
  }
  if (this.impurity !== null && this.impurity !== undefined) {
    output.writeFieldBegin('impurity', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.impurity);
    output.writeFieldEnd();
  }
  if (this.gain !== null && this.gain !== undefined) {
    output.writeFieldBegin('gain', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.gain);
    output.writeFieldEnd();
  }
  if (this.splitIndex !== null && this.splitIndex !== undefined) {
    output.writeFieldBegin('splitIndex', Thrift.Type.I32, 4);
    output.writeI32(this.splitIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TreeLink = module.exports.TreeLink = function(args) {
  this.parentIndex = null;
  this.childIndex = null;
  this.isLeft = null;
  if (args) {
    if (args.parentIndex !== undefined && args.parentIndex !== null) {
      this.parentIndex = args.parentIndex;
    }
    if (args.childIndex !== undefined && args.childIndex !== null) {
      this.childIndex = args.childIndex;
    }
    if (args.isLeft !== undefined && args.isLeft !== null) {
      this.isLeft = args.isLeft;
    }
  }
};
TreeLink.prototype = {};
TreeLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.parentIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.childIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isLeft = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TreeLink.prototype.write = function(output) {
  output.writeStructBegin('TreeLink');
  if (this.parentIndex !== null && this.parentIndex !== undefined) {
    output.writeFieldBegin('parentIndex', Thrift.Type.I32, 1);
    output.writeI32(this.parentIndex);
    output.writeFieldEnd();
  }
  if (this.childIndex !== null && this.childIndex !== undefined) {
    output.writeFieldBegin('childIndex', Thrift.Type.I32, 2);
    output.writeI32(this.childIndex);
    output.writeFieldEnd();
  }
  if (this.isLeft !== null && this.isLeft !== undefined) {
    output.writeFieldBegin('isLeft', Thrift.Type.BOOL, 3);
    output.writeBool(this.isLeft);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TreeComponent = module.exports.TreeComponent = function(args) {
  this.weight = null;
  this.nodes = null;
  this.links = null;
  if (args) {
    if (args.weight !== undefined && args.weight !== null) {
      this.weight = args.weight;
    }
    if (args.nodes !== undefined && args.nodes !== null) {
      this.nodes = Thrift.copyList(args.nodes, [ttypes.TreeNode]);
    }
    if (args.links !== undefined && args.links !== null) {
      this.links = Thrift.copyList(args.links, [ttypes.TreeLink]);
    }
  }
};
TreeComponent.prototype = {};
TreeComponent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.weight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size346 = 0;
        var _rtmp3350;
        this.nodes = [];
        var _etype349 = 0;
        _rtmp3350 = input.readListBegin();
        _etype349 = _rtmp3350.etype;
        _size346 = _rtmp3350.size;
        for (var _i351 = 0; _i351 < _size346; ++_i351)
        {
          var elem352 = null;
          elem352 = new ttypes.TreeNode();
          elem352.read(input);
          this.nodes.push(elem352);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size353 = 0;
        var _rtmp3357;
        this.links = [];
        var _etype356 = 0;
        _rtmp3357 = input.readListBegin();
        _etype356 = _rtmp3357.etype;
        _size353 = _rtmp3357.size;
        for (var _i358 = 0; _i358 < _size353; ++_i358)
        {
          var elem359 = null;
          elem359 = new ttypes.TreeLink();
          elem359.read(input);
          this.links.push(elem359);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TreeComponent.prototype.write = function(output) {
  output.writeStructBegin('TreeComponent');
  if (this.weight !== null && this.weight !== undefined) {
    output.writeFieldBegin('weight', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.weight);
    output.writeFieldEnd();
  }
  if (this.nodes !== null && this.nodes !== undefined) {
    output.writeFieldBegin('nodes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.nodes.length);
    for (var iter360 in this.nodes)
    {
      if (this.nodes.hasOwnProperty(iter360))
      {
        iter360 = this.nodes[iter360];
        iter360.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.links !== null && this.links !== undefined) {
    output.writeFieldBegin('links', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.links.length);
    for (var iter361 in this.links)
    {
      if (this.links.hasOwnProperty(iter361))
      {
        iter361 = this.links[iter361];
        iter361.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TreeModel = module.exports.TreeModel = function(args) {
  this.modelType = null;
  this.components = null;
  this.featureImportances = null;
  if (args) {
    if (args.modelType !== undefined && args.modelType !== null) {
      this.modelType = args.modelType;
    }
    if (args.components !== undefined && args.components !== null) {
      this.components = Thrift.copyList(args.components, [ttypes.TreeComponent]);
    }
    if (args.featureImportances !== undefined && args.featureImportances !== null) {
      this.featureImportances = Thrift.copyList(args.featureImportances, [null]);
    }
  }
};
TreeModel.prototype = {};
TreeModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.modelType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size362 = 0;
        var _rtmp3366;
        this.components = [];
        var _etype365 = 0;
        _rtmp3366 = input.readListBegin();
        _etype365 = _rtmp3366.etype;
        _size362 = _rtmp3366.size;
        for (var _i367 = 0; _i367 < _size362; ++_i367)
        {
          var elem368 = null;
          elem368 = new ttypes.TreeComponent();
          elem368.read(input);
          this.components.push(elem368);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size369 = 0;
        var _rtmp3373;
        this.featureImportances = [];
        var _etype372 = 0;
        _rtmp3373 = input.readListBegin();
        _etype372 = _rtmp3373.etype;
        _size369 = _rtmp3373.size;
        for (var _i374 = 0; _i374 < _size369; ++_i374)
        {
          var elem375 = null;
          elem375 = input.readDouble();
          this.featureImportances.push(elem375);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TreeModel.prototype.write = function(output) {
  output.writeStructBegin('TreeModel');
  if (this.modelType !== null && this.modelType !== undefined) {
    output.writeFieldBegin('modelType', Thrift.Type.STRING, 1);
    output.writeString(this.modelType);
    output.writeFieldEnd();
  }
  if (this.components !== null && this.components !== undefined) {
    output.writeFieldBegin('components', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.components.length);
    for (var iter376 in this.components)
    {
      if (this.components.hasOwnProperty(iter376))
      {
        iter376 = this.components[iter376];
        iter376.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.featureImportances !== null && this.featureImportances !== undefined) {
    output.writeFieldBegin('featureImportances', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.DOUBLE, this.featureImportances.length);
    for (var iter377 in this.featureImportances)
    {
      if (this.featureImportances.hasOwnProperty(iter377))
      {
        iter377 = this.featureImportances[iter377];
        output.writeDouble(iter377);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelAncestryResponse = module.exports.ModelAncestryResponse = function(args) {
  this.modelId = null;
  this.fitEvent = null;
  this.transformEvents = null;
  if (args) {
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
    if (args.fitEvent !== undefined && args.fitEvent !== null) {
      this.fitEvent = new ttypes.FitEvent(args.fitEvent);
    }
    if (args.transformEvents !== undefined && args.transformEvents !== null) {
      this.transformEvents = Thrift.copyList(args.transformEvents, [ttypes.TransformEvent]);
    }
  }
};
ModelAncestryResponse.prototype = {};
ModelAncestryResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fitEvent = new ttypes.FitEvent();
        this.fitEvent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size378 = 0;
        var _rtmp3382;
        this.transformEvents = [];
        var _etype381 = 0;
        _rtmp3382 = input.readListBegin();
        _etype381 = _rtmp3382.etype;
        _size378 = _rtmp3382.size;
        for (var _i383 = 0; _i383 < _size378; ++_i383)
        {
          var elem384 = null;
          elem384 = new ttypes.TransformEvent();
          elem384.read(input);
          this.transformEvents.push(elem384);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelAncestryResponse.prototype.write = function(output) {
  output.writeStructBegin('ModelAncestryResponse');
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 1);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  if (this.fitEvent !== null && this.fitEvent !== undefined) {
    output.writeFieldBegin('fitEvent', Thrift.Type.STRUCT, 2);
    this.fitEvent.write(output);
    output.writeFieldEnd();
  }
  if (this.transformEvents !== null && this.transformEvents !== undefined) {
    output.writeFieldBegin('transformEvents', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.transformEvents.length);
    for (var iter385 in this.transformEvents)
    {
      if (this.transformEvents.hasOwnProperty(iter385))
      {
        iter385 = this.transformEvents[iter385];
        iter385.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExtractedPipelineResponse = module.exports.ExtractedPipelineResponse = function(args) {
  this.transformers = null;
  this.specs = null;
  if (args) {
    if (args.transformers !== undefined && args.transformers !== null) {
      this.transformers = Thrift.copyList(args.transformers, [ttypes.Transformer]);
    }
    if (args.specs !== undefined && args.specs !== null) {
      this.specs = Thrift.copyList(args.specs, [ttypes.TransformerSpec]);
    }
  }
};
ExtractedPipelineResponse.prototype = {};
ExtractedPipelineResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size386 = 0;
        var _rtmp3390;
        this.transformers = [];
        var _etype389 = 0;
        _rtmp3390 = input.readListBegin();
        _etype389 = _rtmp3390.etype;
        _size386 = _rtmp3390.size;
        for (var _i391 = 0; _i391 < _size386; ++_i391)
        {
          var elem392 = null;
          elem392 = new ttypes.Transformer();
          elem392.read(input);
          this.transformers.push(elem392);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size393 = 0;
        var _rtmp3397;
        this.specs = [];
        var _etype396 = 0;
        _rtmp3397 = input.readListBegin();
        _etype396 = _rtmp3397.etype;
        _size393 = _rtmp3397.size;
        for (var _i398 = 0; _i398 < _size393; ++_i398)
        {
          var elem399 = null;
          elem399 = new ttypes.TransformerSpec();
          elem399.read(input);
          this.specs.push(elem399);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtractedPipelineResponse.prototype.write = function(output) {
  output.writeStructBegin('ExtractedPipelineResponse');
  if (this.transformers !== null && this.transformers !== undefined) {
    output.writeFieldBegin('transformers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.transformers.length);
    for (var iter400 in this.transformers)
    {
      if (this.transformers.hasOwnProperty(iter400))
      {
        iter400 = this.transformers[iter400];
        iter400.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.specs !== null && this.specs !== undefined) {
    output.writeFieldBegin('specs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.specs.length);
    for (var iter401 in this.specs)
    {
      if (this.specs.hasOwnProperty(iter401))
      {
        iter401 = this.specs[iter401];
        iter401.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResourceNotFoundException = module.exports.ResourceNotFoundException = function(args) {
  Thrift.TException.call(this, "ResourceNotFoundException")
  this.name = "ResourceNotFoundException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ResourceNotFoundException, Thrift.TException);
ResourceNotFoundException.prototype.name = 'ResourceNotFoundException';
ResourceNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResourceNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('ResourceNotFoundException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidFieldException = module.exports.InvalidFieldException = function(args) {
  Thrift.TException.call(this, "InvalidFieldException")
  this.name = "InvalidFieldException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidFieldException, Thrift.TException);
InvalidFieldException.prototype.name = 'InvalidFieldException';
InvalidFieldException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidFieldException.prototype.write = function(output) {
  output.writeStructBegin('InvalidFieldException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BadRequestException = module.exports.BadRequestException = function(args) {
  Thrift.TException.call(this, "BadRequestException")
  this.name = "BadRequestException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(BadRequestException, Thrift.TException);
BadRequestException.prototype.name = 'BadRequestException';
BadRequestException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BadRequestException.prototype.write = function(output) {
  output.writeStructBegin('BadRequestException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IllegalOperationException = module.exports.IllegalOperationException = function(args) {
  Thrift.TException.call(this, "IllegalOperationException")
  this.name = "IllegalOperationException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(IllegalOperationException, Thrift.TException);
IllegalOperationException.prototype.name = 'IllegalOperationException';
IllegalOperationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IllegalOperationException.prototype.write = function(output) {
  output.writeStructBegin('IllegalOperationException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServerLogicException = module.exports.ServerLogicException = function(args) {
  Thrift.TException.call(this, "ServerLogicException")
  this.name = "ServerLogicException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ServerLogicException, Thrift.TException);
ServerLogicException.prototype.name = 'ServerLogicException';
ServerLogicException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServerLogicException.prototype.write = function(output) {
  output.writeStructBegin('ServerLogicException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidExperimentRunException = module.exports.InvalidExperimentRunException = function(args) {
  Thrift.TException.call(this, "InvalidExperimentRunException")
  this.name = "InvalidExperimentRunException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidExperimentRunException, Thrift.TException);
InvalidExperimentRunException.prototype.name = 'InvalidExperimentRunException';
InvalidExperimentRunException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidExperimentRunException.prototype.write = function(output) {
  output.writeStructBegin('InvalidExperimentRunException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

